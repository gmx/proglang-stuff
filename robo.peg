start =
  grammatical*

expression =
  grammatical
  /atom
  /"(" space* first:expression rest:spacedExpr* ")"
  { return [first].concat(rest) ;}

grammatical =
  check
  /until
  /set
  /spacedCommand

check =
  "check" space* c:spacedExpr space* "yes:"y:grammatical "no:"n:grammatical space*
  { return ["check", c, y, n]; }

until =
  "until" spacedExpr spacedExpr

set =
  "set" space+ a:atom ":" e:spacedExpr
  { return ["set", a, e]; }

spacedExpr =
  space* e:expression space*
  { return e; }

bool =
  "true"
  /"false"

validchar
    = [0-9a-zA-Z_?!+\-=@#$%^&*/.]

atom =
    chars:validchar+
        { return chars.join(""); }

spacedCommand =
  space* c:command space*
  { return c; }

space =
  " " / "\n" / "\t"

command =
  "move" / "left" / "right" / "fire" / "idle"
